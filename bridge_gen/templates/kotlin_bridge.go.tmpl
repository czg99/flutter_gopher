{{$bridge := . -}}
// Code generated by flutter_gopher. DO NOT EDIT.
package {{$bridge.PackageName}}

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

object NativeLoader {
    init {
        System.loadLibrary("{{$bridge.LibName}}")
    }
}

typealias Error = String?

abstract class {{$bridge.LibClassName}} {
    companion object {
        init { NativeLoader }
        @JvmStatic
        fun create(): {{$bridge.LibClassName}} = _{{$bridge.LibClassName}}()
    }
{{range $fn := $bridge.Funcs}}
    abstract fun {{$fn.KotlinType}}(
        {{- range $i, $param := $fn.Params.Fields}}
        {{- if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}}
        {{- end -}}
    ): {{$fn.KotlinResultType}}
    abstract suspend fun {{$fn.KotlinType}}Async(
        {{- range $i, $param := $fn.Params.Fields}}
        {{- if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}}
        {{- end -}}
    ): {{$fn.KotlinResultType}}
    abstract fun {{$fn.KotlinType}}JavaAsync(
        {{- range $i, $param := $fn.Params.Fields}}
        {{- if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}},
        {{- end -}}
        callback: ({{$fn.KotlinResultType}}) -> Unit)
{{end -}}
}

private class _{{$bridge.LibClassName}} : {{$bridge.LibClassName}}() {
{{range $fn := $bridge.Funcs}}
    private fun {{$fn.KotlinCType}}Params(
        {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}}{{end -}}
    ): {{$fn.Params.KotlinType}} {
        return {{$fn.Params.KotlinType}}(
            {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}} = {{$param.KotlinName}}{{end -}}
        )
    }

    private fun {{$fn.KotlinCType}}Result(result: {{$fn.Results.KotlinType}}): {{$fn.KotlinResultType}} {
        if (result.panicErr != null) {
            throw FgPanic("{{$bridge.LibName}}", "{{$fn.KotlinType}}", result.panicErr!!)
        }
        {{- if $fn.HasErr}}
        if (result.err != null) {
            throw FgError("{{$bridge.LibName}}", "{{$fn.KotlinType}}", result.err!!)
        }
        {{- end}}
        {{- if gt $fn.ResultCount 1}}
        return result
        {{- else if eq $fn.ResultCount 1}}
        return result.{{(index $fn.Results.Fields 0).KotlinName}}
        {{- end}}
    }

    override fun {{$fn.KotlinType}}(
        {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}}{{end -}}
    ): {{$fn.KotlinResultType}} {
        val params = {{$fn.KotlinCType}}Params(
            {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}{{end -}}
        )
        val result = {{$fn.KotlinCType}}(params)
        return {{$fn.KotlinCType}}Result(result)
    }

    override suspend fun {{$fn.KotlinType}}Async(
        {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}}{{end -}}
    ): {{$fn.KotlinResultType}} = withContext(Dispatchers.IO) {
        {{$fn.KotlinType}}(
            {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}{{end -}}
        )
    }

    @OptIn(kotlinx.coroutines.DelicateCoroutinesApi::class)
    override fun {{$fn.KotlinType}}JavaAsync(
        {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}: {{$param.KotlinType}},{{end -}}
        callback: ({{$fn.KotlinResultType}}) -> Unit
    ) {
        GlobalScope.launch(Dispatchers.Main) {
            val result = {{$fn.KotlinType}}Async(
                {{- range $i, $param := $fn.Params.Fields}}{{if gt $i 0}}, {{end}}{{$param.KotlinName}}{{end -}}
            )
            callback(result)
        }
    }

    private external fun {{$fn.KotlinCType}}(params: {{$fn.Params.KotlinType}}): {{$fn.Results.KotlinType}}
{{end -}}
}

{{- define "generateClass"}}
{{- $obj := .obj}}
{{- if .isParams}}private {{end}}class {{$obj.KotlinType}}(
{{- if .isParams}}
    @JvmField
    var portId: Long = 0,
{{- end}}
{{- range $i, $field := $obj.Fields}}
    @JvmField
    var {{$field.KotlinName}}: {{$field.KotlinType}} = {{$field.KotlinDefault}},
{{- end}}
{{- if .isResults}}
    @JvmField
    var panicErr: Error = null
{{- end}}
)
{{- end}}

{{range $obj := $bridge.Structs}}
{{template "generateClass" makeMap "obj" $obj}}
{{end}}

{{range $fn := $bridge.Funcs}}
{{template "generateClass" makeMap "obj" $fn.Params "isParams" true}}
{{template "generateClass" makeMap "obj" $fn.Results "isResults" true}}
{{end}}

class FgPanic(val lib: String, val func: String, val err: String): RuntimeException("[$lib] $func panic: $err")
class FgError(val lib: String, val func: String, val err: String): Exception("[$lib] $func error: $err")