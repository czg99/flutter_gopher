// Code generated by flutter_gopher. DO NOT EDIT.
#import "FgBridge.h"

#include "../../gosrc/bridge/include/bridge.h"

extern void fg_bridge_binding_{{.Timestamp}}(void);
extern void fg_ffi_binding_{{.Timestamp}}(void);

@implementation FgBridge

typedef NSString FgError;

__weak id<FgBridgeDelegate> globalDelegate = nil;

void methodHandle(FgRequest request, FgResponse* response) {
    [FgBridge methodHandle:request response:response];
}

+ (void)initialize {
    fg_bridge_binding_{{.Timestamp}}();
    fg_ffi_binding_{{.Timestamp}}();
    fg_init_platform_method_handle_{{.Timestamp}}(methodHandle);
}

+ (void)setDelegate:(id<FgBridgeDelegate>)delegate {
    globalDelegate = delegate;
}

+ (FgData)mapFromNSData:(NSData*)from {
    FgData result = {};
    if (from != nil && from.length > 0) {
        NSUInteger dataLen = [from length];
        void* data = malloc(dataLen);
        [from getBytes:data length:dataLen];
        result.data = data;
        result.size = (int)dataLen;
    }
    return result;
}

+ (NSData*)mapToNSData:(FgData)from {
    if (from.data == nil) return nil;
    NSData* result = [[NSData alloc] initWithBytes:from.data length:from.size];
    free(from.data);
    return result;
}

+ (FgData)mapFromNSString:(NSString*)from {
    NSData* data = from != nil ? [from dataUsingEncoding:NSUTF8StringEncoding] : nil;
    return [self mapFromNSData:data];
}

+ (NSString*)mapToNSString:(FgData)from {
    if (from.data == nil) return @"";
    NSString* result = [[NSString alloc] initWithBytes:from.data length:from.size encoding:NSUTF8StringEncoding];
    free(from.data);
    return result;
}

+ (FgData)mapFromFgError:(FgError*)from {
    return [self mapFromNSString:from];
}

+ (FgError*)mapToFgError:(FgData)from {
    if (from.data == nil) return nil;
    return [self mapToNSString:from];
}

+ (void)methodHandle:(FgRequest)request response:(FgResponse*)response {
    int method = request.method;
    NSData* data = [self mapToNSData:request.data];

    if (globalDelegate == nil) {
        response->error = [self mapFromFgError:@"init err: delegate is nil"];
        return;
    }
    
    NSData* result = nil;
    NSError* error = nil;
    @try {
        result = [globalDelegate methodHandle:method data:data error:&error];
    } @catch (NSException *e) {
        NSString *caughtErr = [NSString stringWithFormat:@"caught err: %@", [e reason]];
        response->error = [self mapFromFgError:caughtErr];
    }
    
    if (error != nil) {
        response->error = [self mapFromFgError:error.localizedDescription];
        return;
    }
    response->data = [self mapFromNSData:result];
}

+ (NSData*)callGoMethod:(int)method data:(NSData*)data error:(NSError**)error {    
    FgRequest request = {
        .method = method,
        .data = [self mapFromNSData:data],
    };
    
    FgResponse response = fg_call_go_method_{{.Timestamp}}(request);
    
    NSData* result = [self mapToNSData:response.data];
    FgError* err = [self mapToFgError:response.error];
    if (err != nil) {
        *error = [NSError errorWithDomain:@"{{.PackageName}}" code:1 userInfo:@{NSLocalizedDescriptionKey: err}];
        return nil;
    }
    return result;
}

+ (void)callDartMethod:(int)method data:(NSData*)data {    
    FgRequest request = {
        .method = method,
        .data = [self mapFromNSData:data],
    };
    
    fg_call_dart_method_{{.Timestamp}}(request);
}

@end
