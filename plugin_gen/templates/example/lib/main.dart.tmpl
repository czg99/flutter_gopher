import 'dart:async';
import 'dart:math';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:{{.ProjectName}}/{{.ProjectName}}.dart';

void main() {
  {{.LibClassName}}.init();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Flutter Gopher Demo',
      home: MyHomePage(title: 'Flutter Gopher Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

typedef MethodCallback = FutureOr<void> Function(
    String method, Uint8List? data);

class _MyHomePageState extends State<MyHomePage> {
  String sendMethod = '';
  Uint8List? send;
  Uint8List? recv;

  (String, Uint8List?) randomPacket() {
    final r = Random(DateTime.now().millisecondsSinceEpoch);
    final method = '/app/${r.nextInt(99999)}';
    final count = r.nextInt(10);
    if (count < 3) {
      return (method, null);
    }
    final data = Uint8List(count);
    for (var i = 0; i < count; i++) {
      data[i] = r.nextInt(255);
    }
    return (method, data);
  }

  String bytesToHex(Uint8List? data) => data != null
      ? data.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')
      : 'null';

  @override
  void initState() {
    super.initState();
    {{.LibClassName}}.setMethodHandle((method, data) {
      print('[{{.LibClassName}}] Dart Received: $method ${bytesToHex(data)}');
    });
  }

  Widget buildButton(String text, Color color, MethodCallback onTap) {
    return MaterialButton(
      color: color,
      onPressed: () async {
        final (method, data) = randomPacket();
        sendMethod = method;
        send = data;
        try {
          await onTap(method, data);
        } catch (e) {
          showToast(e.toString());
        }
        setState(() {});
      },
      child: Text(text),
    );
  }

  void showToast(String text) {
    if (context.mounted) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(e.toString())));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.grey,
        title: Text(widget.title),
      ),
      body: Container(
        padding: const EdgeInsets.only(top: 20),
        alignment: Alignment.center,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Text('Method: $sendMethod'),
            Text('Send: ${bytesToHex(send)}'),
            Text('Recv: ${bytesToHex(recv)}'),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                buildButton('Call go', Colors.blue, (method, data) {
                  recv = {{.LibClassName}}.callGoMethod(sendMethod, data: send);
                }),
                buildButton('Call native', Colors.green, (method, data) {
                  recv = {{.LibClassName}}.callNativeMethod(sendMethod, data: send);
                }),
              ],
            ),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                buildButton('Call go async', Colors.blueAccent,
                    (method, data) async {
                  recv = await {{.LibClassName}}.callGoMethodAsync(sendMethod, data: send);
                }),
                buildButton('Call native async', Colors.greenAccent,
                    (method, data) async {
                  recv = await {{.LibClassName}}.callNativeMethodAsync(sendMethod, data: send);
                }),
              ],
            )
          ],
        ),
      ),
    );
  }
}
