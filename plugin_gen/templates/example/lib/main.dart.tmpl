import 'dart:math';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:{{.ProjectName}}/bridge.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Flutter Gopher Demo',
      home: MyHomePage(title: 'Flutter Gopher Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String sendMethod = '';
  Uint8List? send;
  Uint8List? recv;

  (String, Uint8List?) randomPacket() {
    final r = Random(DateTime.now().millisecondsSinceEpoch);
    final method = '/app/${r.nextInt(99999)}';
    final count = r.nextInt(10);
    if (count < 3) {
      return (method, null);
    }
    final data = Uint8List(count);
    for (var i = 0; i < count; i++) {
      data[i] = r.nextInt(255);
    }
    return (method, data);
  }

  String bytesToHex(Uint8List? data) => data != null
      ? data.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')
      : 'null';

  @override
  void initState() {
    super.initState();
    FgBridge.setMethodHandle((method, data) {
      print('Dart Received: $method ${bytesToHex(data)}');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.grey,
        title: Text(widget.title),
      ),
      body: Container(
        padding: const EdgeInsets.only(top: 20),
        alignment: Alignment.center,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Text('Method: $sendMethod'),
            Text('Send: ${bytesToHex(send)}'),
            Text('Recv: ${bytesToHex(recv)}'),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                MaterialButton(
                  color: Colors.blue,
                  onPressed: () {
                    setState(() {
                      final (method, data) = randomPacket();
                      sendMethod = method;
                      send = data;
                      recv = FgBridge.callGoMethod(sendMethod, data: send);
                    });
                  },
                  child: const Text('Call go method'),
                ),
                MaterialButton(
                  color: Colors.green,
                  onPressed: () {
                    setState(() {
                      final (method, data) = randomPacket();
                      sendMethod = method;
                      send = data;
                      recv = FgBridge.callNativeMethod(sendMethod, data: send);
                    });
                  },
                  child: const Text('Call native method'),
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}
