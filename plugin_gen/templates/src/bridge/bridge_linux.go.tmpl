// Code generated by flutter_gopher. DO NOT EDIT.
package bridge

/*
#include "include/bridge.h"
extern DLLEXPORT void fg_native_method_handle(FgRequest request, FgResponse* response);
*/
import "C"
import (
	"fmt"
	nl "native_linux"
	nlb "native_linux/bridge"
)

func init() {
	nlb.CallGoMethod = callGoMethod
	nlb.CallDartMethod = callDartMethod
	nlb.InitMethodHandle = initNativeMethodHandle
	go nl.Register()
}

var linuxNativeMethodHandle MethodHandle

//export fg_native_method_handle
func fg_native_method_handle(request C.FgRequest, response *C.FgResponse) {
	method, data := mapFromFgRequest(request)
	if linuxNativeMethodHandle == nil {
		response.error = mapFgDataFromString("native method handle not init")
		return
	}

	defer func() {
		if r := recover(); r != nil {
			response.error = mapFgDataFromString(fmt.Sprintf("call native method: %s, panic err: %v", method, r))
		}
	}()

	result, err := linuxNativeMethodHandle(method, data)
	if err != nil {
		response.error = mapFgDataFromString(fmt.Sprintf("call native method: %s, error: %v", method, err))
		return
	}
	response.data = mapFgDataFromBytes(result)
}

func initNativeMethodHandle(handle func(method string, data []byte) ([]byte, error)) {
	linuxNativeMethodHandle = handle
	if handle != nil {
		fgNativeMethodHandle = (C.FgNativeMethodHandle)(C.fg_native_method_handle)
		return
	}
	fgNativeMethodHandle = nil
}
