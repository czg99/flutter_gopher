// Code generated by flutter_gopher. DO NOT EDIT.
// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_import, unused_field
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'dart:isolate';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'loader.dart';

typedef FgBridgeMethodHandle = void Function(String method, Uint8List? data);

class FgBridgeException implements Exception {
  final String message;

  const FgBridgeException(this.message);

  @override
  String toString() => 'FgBridgeException: $message';
}

class FgBridge {
  static final _api = _bridge();

  static FgBridgeMethodHandle? methodHandle;

  FgBridge._();

  static void init() => _api;

  static void setMethodHandle(FgBridgeMethodHandle handle) {
    _api;
    methodHandle = handle;
  }

  static Uint8List? callGoMethod(String method, {Uint8List? data}) => _api.callGoMethod(method, data: data);
  static Future<Uint8List?> callGoMethodAsync(String method, {Uint8List? data}) =>
      _api.callGoMethodAsync(method, data: data);
  static Uint8List? callPlatformMethod(String method, {Uint8List? data}) => _api.callPlatformMethod(method, data: data);
  static Future<Uint8List?> callPlatformMethodAsync(String method, {Uint8List? data}) =>
      _api.callPlatformMethodAsync(method, data: data);

  static Uint8List stringToUint8List(String value) => const Utf8Encoder().convert(value);
  static String uint8ListToString(Uint8List value) => const Utf8Decoder().convert(value);
}

final _lib = FgLoader('{{.LibName}}');
final void Function(ffi.Pointer<ffi.Void>, int) _fgInitDartApi = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64)>>('fg_init_dart_api_{{.Timestamp}}')
    .asFunction();
final _fgResponse Function(_fgRequest) _fgCallGoMethod = _lib
    .lookup<ffi.NativeFunction<_fgResponse Function(_fgRequest)>>('fg_call_go_method_{{.Timestamp}}')
    .asFunction();
final void Function(int, _fgRequest) _fgCallGoMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, _fgRequest)>>('fg_call_go_method_async_{{.Timestamp}}')
    .asFunction();
final _fgResponse Function(_fgRequest) _fgCallPlatformMethod = _lib
    .lookup<ffi.NativeFunction<_fgResponse Function(_fgRequest)>>('fg_call_platform_method_{{.Timestamp}}')
    .asFunction();
final void Function(int, _fgRequest) _fgCallPlatformMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, _fgRequest)>>(
      'fg_call_platform_method_async_{{.Timestamp}}',
    )
    .asFunction();

class _bridge {
  _bridge() {
    final receivePort = ReceivePort();
    receivePort.listen((addr) {
      final requestPtr = ffi.Pointer.fromAddress(addr).cast<_fgRequest>();
      final (method, data) = _mapFromFgRequest(requestPtr[0]);
      malloc.free(requestPtr);

      if (FgBridge.methodHandle != null) {
        FgBridge.methodHandle!(method, data);
      }
    });
    _fgInitDartApi(ffi.NativeApi.initializeApiDLData, receivePort.sendPort.nativePort);
  }

  Uint8List? callGoMethod(String method, {Uint8List? data}) {
    final request = _mapToFgRequest(method, data);
    final response = _fgCallGoMethod(request);
    final (result, error) = _mapFromFgResponse(response);
    if (error != null) {
      throw FgBridgeException(error);
    }
    return result;
  }

  Future<Uint8List?> callGoMethodAsync(String method, {Uint8List? data}) async {
    final receivePort = ReceivePort();
    final request = _mapToFgRequest(method, data);
    _fgCallGoMethodAsync(receivePort.sendPort.nativePort, request);
    final responseAddr = await receivePort.first;
    final responsePtr = ffi.Pointer.fromAddress(responseAddr).cast<_fgResponse>();

    final (result, error) = _mapFromFgResponse(responsePtr[0]);
    malloc.free(responsePtr);
    if (error != null) {
      throw FgBridgeException(error);
    }
    return result;
  }

  Uint8List? callPlatformMethod(String method, {Uint8List? data}) {
    final request = _mapToFgRequest(method, data);
    final response = _fgCallPlatformMethod(request);
    final (result, error) = _mapFromFgResponse(response);
    if (error != null) {
      throw FgBridgeException(error);
    }
    return result;
  }

  Future<Uint8List?> callPlatformMethodAsync(String method, {Uint8List? data}) async {
    final receivePort = ReceivePort();
    final request = _mapToFgRequest(method, data);
    _fgCallPlatformMethodAsync(receivePort.sendPort.nativePort, request);
    final responseAddr = await receivePort.first;
    final responsePtr = ffi.Pointer.fromAddress(responseAddr).cast<_fgResponse>();

    final (result, error) = _mapFromFgResponse(responsePtr[0]);
    malloc.free(responsePtr);
    if (error != null) {
      throw FgBridgeException(error);
    }
    return result;
  }
}

typedef _fgError = String?;

final class _fgData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;
  @ffi.Int()
  external int size;
}

final class _fgRequest extends ffi.Struct {
  external _fgData method;
  external _fgData data;
}

final class _fgResponse extends ffi.Struct {
  external _fgData data;
  external _fgData error;
}

_fgRequest _mapToFgRequest(String method, Uint8List? data) {
  final result = ffi.Struct.create<_fgRequest>();
  result.method = _mapFgDataFromString(method);
  result.data = _mapFgDataFromBytes(data);
  return result;
}

(String method, Uint8List? data) _mapFromFgRequest(_fgRequest from) {
  final method = _mapFgDataToString(from.method);
  final data = _mapFgDataToBytes(from.data);
  return (method, data);
}

_fgResponse _mapToFgResponse(Uint8List? data, _fgError error) {
  final result = ffi.Struct.create<_fgResponse>();
  result.data = _mapFgDataFromBytes(data);
  result.error = _mapFgDataFromError(error);
  return result;
}

(Uint8List? data, _fgError error) _mapFromFgResponse(_fgResponse from) {
  final data = _mapFgDataToBytes(from.data);
  final error = _mapFgDataToError(from.error);
  return (data, error);
}

Uint8List? _mapFgDataToBytes(_fgData from) {
  if (from.data == ffi.nullptr) return null;
  final data = from.data.cast<ffi.Uint8>();
  final result = Uint8List.fromList(data.asTypedList(from.size));
  malloc.free(from.data);
  return result;
}

_fgData _mapFgDataFromBytes(Uint8List? from) {
  final result = ffi.Struct.create<_fgData>();
  if (from != null) {
    final data = malloc<ffi.Uint8>(from.length);
    data.asTypedList(from.length).setAll(0, from);
    result.data = data.cast();
    result.size = from.length;
  }
  return result;
}

String _mapFgDataToString(_fgData from) {
  final bytes = _mapFgDataToBytes(from);
  if (bytes == null) return '';
  return const Utf8Decoder().convert(bytes);
}

_fgData _mapFgDataFromString(String from) {
  final bytes = const Utf8Encoder().convert(from);
  return _mapFgDataFromBytes(bytes);
}

_fgError _mapFgDataToError(_fgData from) {
  if (from.data == ffi.nullptr) return null;
  return _mapFgDataToString(from);
}

_fgData _mapFgDataFromError(_fgError from) {
  if (from == null) {
    return ffi.Struct.create<_fgData>();
  }
  return _mapFgDataFromString(from);
}
