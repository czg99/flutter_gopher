// Code generated by flutter_gopher. DO NOT EDIT.
// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_import
import 'dart:async';
import 'dart:ffi' as ffi;
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:flutter_gopher/flutter_gopher.dart';

typedef Error = String?;

abstract interface class {{.LibClassName}} {
  factory {{.LibClassName}}() => _{{.LibClassName}}();

  Uint8List? callGoMethod(String method, {Uint8List? data});
  Future<Uint8List?> callGoMethodAsync(String method, {Uint8List? data});
  Uint8List? callNativeMethod(String method, {Uint8List? data});
  Future<Uint8List?> callNativeMethodAsync(String method, {Uint8List? data});
}

final _lib = FgLoader('{{.LibName}}');
final _fgPacket Function(_fgPacket) _fgCallGoMethod = _lib
    .lookup<ffi.NativeFunction<_fgPacket Function(_fgPacket)>>('fg_call_go_method')
    .asFunction();
final void Function(_fgPacket) _fgCallGoMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(_fgPacket)>>(
        'fg_call_go_method_async')
    .asFunction();
final _fgPacket Function(_fgPacket) _fgCallNativeMethod = _lib
    .lookup<ffi.NativeFunction<_fgPacket Function(_fgPacket)>>('fg_call_native_method')
    .asFunction();
final void Function(_fgPacket) _fgCallNativeMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(_fgPacket)>>(
        'fg_call_native_method_async')
    .asFunction();
final _fgPacket Function() _fgPacketLoop = _lib
    .lookup<ffi.NativeFunction<_fgPacket Function()>>('fg_packet_loop')
    .asFunction();
final _fgPacket Function() _fgEmptyPacket = _lib
    .lookup<ffi.NativeFunction<_fgPacket Function()>>('fg_empty_packet')
    .asFunction();
final int Function() _fgNextPortId = _lib
    .lookup<ffi.NativeFunction<ffi.Int64 Function()>>('fg_next_port_id')
    .asFunction();

final class _{{.LibClassName}} implements {{.LibClassName}} {
  _{{.LibClassName}}() {
    FgLoop.once('{{.LibName}}', (_) {
      final result = _fgPacketLoop();
      FgAsync.sendGoResult(result.id, result);
      return true;
    });
  }

  _fgPacket _mapToPacket(String method, Uint8List? data) {
    final c_method = _mapFromString(method);
    final c_data = _mapFromBytes(data);

    final result = _fgEmptyPacket();
    result.method = c_method;
    result.method_len = c_method.length;
    result.data = c_data;
    result.data_len = data?.length ?? 0;
    return result;
  }

  @override
  Uint8List? callGoMethod(String method, {Uint8List? data}) {
    final params = _mapToPacket(method, data);
    final result = _fgCallGoMethod(params);
    calloc.free(result.method);
    return _mapToBytes(result.data, result.data_len);
  }

  @override
  Future<Uint8List?> callGoMethodAsync(String method, {Uint8List? data}) async {
    final params = _mapToPacket(method, data);
    final result = await FgAsync.go<_fgPacket, _fgPacket>((params, portId) {
      params.id = portId;
      _fgCallGoMethodAsync(params);
    }, params, _fgNextPortId());
    calloc.free(result.method);
    return _mapToBytes(result.data, result.data_len);
  }

  @override
  Uint8List? callNativeMethod(String method, {Uint8List? data}) {
    final params = _mapToPacket(method, data);
    final result = _fgCallNativeMethod(params);
    calloc.free(result.method);
    return _mapToBytes(result.data, result.data_len);
  }

  @override
  Future<Uint8List?> callNativeMethodAsync(String method, {Uint8List? data}) async {
    final params = _mapToPacket(method, data);
    final result = await FgAsync.go<_fgPacket, _fgPacket>((params, portId) {
      params.id = portId;
      _fgCallNativeMethodAsync(params);
    }, params, _fgNextPortId());
    calloc.free(result.method);
    return _mapToBytes(result.data, result.data_len);
  }
}

final class _fgPacket extends ffi.Struct {
  @ffi.Int64()
  external int id;
  external ffi.Pointer<Utf8> method;
  @ffi.Int()
  external int method_len;
  external ffi.Pointer<ffi.Void> data;
  @ffi.Int()
  external int data_len;
}

Uint8List? _mapToBytes(ffi.Pointer<ffi.Void> data, int length) {
  if (data == ffi.nullptr) return null;
  final bytes = data.cast<ffi.Uint8>();
  final result = Uint8List(length);
  for (var i = 0; i < length; i++) {
    result[i] = bytes[i];
  }
  calloc.free(data);
  return result;
}

ffi.Pointer<ffi.Void> _mapFromBytes(Uint8List? from) {
  if (from == null) return ffi.nullptr;
  final result = calloc<ffi.Uint8>(from.length);
  for (var i = 0; i < from.length; i++) {
    result[i] = from[i];
  }
  return result.cast();
}

String _mapToString(ffi.Pointer<Utf8> from, {int? length}) {
  if (from == ffi.nullptr) return '';
  final result = from.toDartString(length: length);
  calloc.free(from);
  return result;
}

ffi.Pointer<Utf8> _mapFromString(String from) {
  return from.toNativeUtf8(allocator: calloc);
}
