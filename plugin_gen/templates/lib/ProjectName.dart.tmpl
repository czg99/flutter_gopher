// Code generated by flutter_gopher. DO NOT EDIT.
// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_import, unused_field
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'dart:isolate';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'loader.dart';

typedef {{.LibClassName}}MethodHandle = void Function(String method, Uint8List? data);

class {{.LibClassName}} {
  static final _api = _bridge();

  static {{.LibClassName}}MethodHandle? methodHandle;

  static void setMethodHandle({{.LibClassName}}MethodHandle handle) =>
      methodHandle = handle;

  static Uint8List? callGoMethod(String method, {Uint8List? data}) =>
      _api.callGoMethod(method, data: data);
  static Future<Uint8List?> callGoMethodAsync(String method,
          {Uint8List? data}) =>
      _api.callGoMethodAsync(method, data: data);
  static Uint8List? callNativeMethod(String method, {Uint8List? data}) =>
      _api.callNativeMethod(method, data: data);
  static Future<Uint8List?> callNativeMethodAsync(String method,
          {Uint8List? data}) =>
      _api.callNativeMethodAsync(method, data: data);

  static Uint8List stringToUint8List(String value) =>
      const Utf8Encoder().convert(value);
  static String uint8ListToString(Uint8List value) =>
      const Utf8Decoder().convert(value);
}

final _lib = FgLoader('{{.LibName}}');
final _fgData Function() _fgEmptyData = _lib
    .lookup<ffi.NativeFunction<_fgData Function()>>('fg_empty_data_{{.Timestamp}}')
    .asFunction();
final _fgRequest Function() _fgEmptyRequest = _lib
    .lookup<ffi.NativeFunction<_fgRequest Function()>>('fg_empty_request_{{.Timestamp}}')
    .asFunction();
final _fgResponse Function() _fgEmptyResponse = _lib
    .lookup<ffi.NativeFunction<_fgResponse Function()>>('fg_empty_response_{{.Timestamp}}')
    .asFunction();
final void Function(ffi.Pointer<ffi.Void>, int) _fgInitDartApi = _lib
    .lookup<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<ffi.Void>, ffi.Int64)>>('fg_init_dart_api_{{.Timestamp}}')
    .asFunction();
final _fgResponse Function(_fgRequest) _fgCallGoMethod = _lib
    .lookup<ffi.NativeFunction<_fgResponse Function(_fgRequest)>>(
        'fg_call_go_method_{{.Timestamp}}')
    .asFunction();
final void Function(int, _fgRequest) _fgCallGoMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, _fgRequest)>>(
        'fg_call_go_method_async_{{.Timestamp}}')
    .asFunction();
final _fgResponse Function(_fgRequest) _fgCallNativeMethod = _lib
    .lookup<ffi.NativeFunction<_fgResponse Function(_fgRequest)>>(
        'fg_call_native_method_{{.Timestamp}}')
    .asFunction();
final void Function(int, _fgRequest) _fgCallNativeMethodAsync = _lib
    .lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, _fgRequest)>>(
        'fg_call_native_method_async_{{.Timestamp}}')
    .asFunction();

class _bridge {
  _bridge() {
    final receivePort = ReceivePort();
    receivePort.listen((addr) {
      final requestPtr = ffi.Pointer.fromAddress(addr).cast<_fgRequest>();
      final (method, data) = _mapFromFgRequest(requestPtr[0]);
      malloc.free(requestPtr);

      if ({{.LibClassName}}.methodHandle != null) {
        {{.LibClassName}}.methodHandle!(method, data);
      }
    });
    _fgInitDartApi(
        ffi.NativeApi.initializeApiDLData, receivePort.sendPort.nativePort);
  }

  Uint8List? callGoMethod(String method, {Uint8List? data}) {
    final request = _mapToFgRequest(method, data);
    final response = _fgCallGoMethod(request);
    final result = _mapFromFgResponse(response);
    return result;
  }

  Future<Uint8List?> callGoMethodAsync(String method, {Uint8List? data}) async {
    final receivePort = ReceivePort();
    final request = _mapToFgRequest(method, data);
    _fgCallGoMethodAsync(receivePort.sendPort.nativePort, request);
    final responseAddr = await receivePort.first;
    final responsePtr =
        ffi.Pointer.fromAddress(responseAddr).cast<_fgResponse>();

    final result = _mapFromFgResponse(responsePtr[0]);
    malloc.free(responsePtr);
    return result;
  }

  Uint8List? callNativeMethod(String method, {Uint8List? data}) {
    final request = _mapToFgRequest(method, data);
    final response = _fgCallNativeMethod(request);
    final result = _mapFromFgResponse(response);
    return result;
  }

  Future<Uint8List?> callNativeMethodAsync(String method,
      {Uint8List? data}) async {
    final receivePort = ReceivePort();
    final request = _mapToFgRequest(method, data);
    _fgCallNativeMethodAsync(receivePort.sendPort.nativePort, request);
    final responseAddr = await receivePort.first;
    final responsePtr =
        ffi.Pointer.fromAddress(responseAddr).cast<_fgResponse>();

    final result = _mapFromFgResponse(responsePtr[0]);
    malloc.free(responsePtr);
    return result;
  }
}

final class _fgData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;
  @ffi.Int()
  external int size;
}

final class _fgRequest extends ffi.Struct {
  external _fgData method;
  external _fgData data;
}

final class _fgResponse extends ffi.Struct {
  external _fgData data;
}

void _freeFgData(_fgData value) {
  if (value.data != ffi.nullptr) {
    malloc.free(value.data);
    value.data = ffi.nullptr;
    value.size = 0;
  }
}

_fgRequest _mapToFgRequest(String method, Uint8List? data) {
  final result = _fgEmptyRequest();
  result.method = _mapFgDataFromString(method);
  result.data = _mapFgDataFromBytes(data);
  return result;
}

(String method, Uint8List? data) _mapFromFgRequest(_fgRequest from) {
  final method = _mapFgDataToString(from.method);
  final data = _mapFgDataToBytes(from.data);
  return (method, data);
}

_fgResponse _mapToFgResponse(Uint8List? data) {
  final result = _fgEmptyResponse();
  result.data = _mapFgDataFromBytes(data);
  return result;
}

Uint8List? _mapFromFgResponse(_fgResponse from) {
  final data = _mapFgDataToBytes(from.data);
  return data;
}

Uint8List? _mapFgDataToBytes(_fgData from) {
  if (from.data == ffi.nullptr) return null;
  final data = from.data.cast<ffi.Uint8>();
  final result = Uint8List.fromList(data.asTypedList(from.size));
  _freeFgData(from);
  return result;
}

_fgData _mapFgDataFromBytes(Uint8List? from) {
  final result = _fgEmptyData();
  if (from != null) {
    final data = malloc<ffi.Uint8>(from.length);
    data.asTypedList(from.length).setAll(0, from);
    result.data = data.cast();
    result.size = from.length;
  }
  return result;
}

String _mapFgDataToString(_fgData from) {
  final bytes = _mapFgDataToBytes(from);
  if (bytes == null) return '';
  return const Utf8Decoder().convert(bytes);
}

_fgData _mapFgDataFromString(String from) {
  final bytes = const Utf8Encoder().convert(from);
  return _mapFgDataFromBytes(bytes);
}
