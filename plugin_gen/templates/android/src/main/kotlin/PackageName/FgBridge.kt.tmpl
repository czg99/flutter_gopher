// Code generated by flutter_gopher. DO NOT EDIT.
package {{.PackageName}}

import com.sun.jna.*
import java.nio.charset.StandardCharsets

interface FgBridgeDelegate {
    fun methodHandle(method: Int, data: ByteArray?): Result<ByteArray?>
}

abstract class FgBridge {
    companion object {
        init {
            Bridge
        }
        
        @JvmStatic
        var delegate: FgBridgeDelegate? = null

        @JvmStatic
        fun callGoMethod(method: Int, data: ByteArray? = null): Result<ByteArray?> {
            return Bridge.callGoMethod(method, data)
        }
        
        @JvmStatic
        fun callDartMethod(method: Int, data: ByteArray? = null) {
            Bridge.callDartMethod(method, data)
        }
    }
}

private class Bridge : FgBridge() {
    companion object {
        private val bridgeLib: BridgeLib = Native.load("{{.LibName}}", BridgeLib::class.java)
        private var methodHandle: FgPlatformMethodHandleCallback

        init {
            methodHandle = object : FgPlatformMethodHandleCallback {
                override fun invoke(request: FgRequest.ByValue, response: FgResponse.ByReference) {
                    methodHandle(request, response)
                }
            }
            bridgeLib.fg_init_platform_method_handle_{{.Timestamp}}(methodHandle)
        }

        fun callGoMethod(method: Int, data: ByteArray?): Result<ByteArray?> {
            val request = FgRequest.ByValue()
            request.method = method
            request.data = mapFromBytes(data)

            val response = bridgeLib.fg_call_go_method_{{.Timestamp}}(request)

            val result = mapToBytes(response.data)
            val error = mapToError(response.error)
            if (error != null) {
                return Result.failure(Exception(error))
            }
            return Result.success(result)
        }

        fun callDartMethod(method: Int, data: ByteArray?) {
            val request = FgRequest.ByValue()
            request.method = method
            request.data = mapFromBytes(data)

            bridgeLib.fg_call_dart_method_{{.Timestamp}}(request)
        }

        private fun mapFromBytes(from: ByteArray?): FgData.ByValue {
            val result = FgData.ByValue()
            if (from?.isNotEmpty() == true) {
                val memory = Pointer(Native.malloc(from.size.toLong()))
                memory.write(0, from, 0, from.size)
                result.data = memory
                result.size = from.size
            }
            return result
        }

        private fun mapToBytes(from: FgData): ByteArray? {
            if (from.data == Pointer.NULL) return null
            val result = from.data.getByteArray(0, from.size)
            Native.free(Pointer.nativeValue(from.data))
            return result
        }

        private fun mapFromString(from: String): FgData.ByValue {
            val bytes = from.toByteArray(Charsets.UTF_8)
            return mapFromBytes(bytes)
        }

        private fun mapToString(from: FgData): String {
            val bytes = mapToBytes(from) ?: return ""
            return String(bytes, StandardCharsets.UTF_8)
        }

        private fun mapFromError(from: String?): FgData.ByValue {
            if (from == null) return FgData.ByValue()
            return mapFromString(from)
        }

        private fun mapToError(from: FgData): String? {
            if (from.data == Pointer.NULL) return null
            return mapToString(from)
        }

        private fun methodHandle(request: FgRequest.ByValue, response: FgResponse.ByReference) {
            val method = request.method
            val data = mapToBytes(request.data)

            if (delegate == null) {
                response.error = mapFromError("init err: delegate is null")
                return
            }

            try {
                val result = delegate!!.methodHandle(method, data)
                if (result.isSuccess) {
                    response.data = mapFromBytes(result.getOrNull())
                } else {
                    response.error = mapFromError("${result.exceptionOrNull()?.message}")
                }
            } catch (e: Throwable) {
                response.error = mapFromError("caught err: ${e.message}")
            }
        }
    }
}

@Structure.FieldOrder("data", "size")
private open class FgData private constructor() : Structure() {
    class ByValue : FgData(), Structure.ByValue

    @JvmField
    var data: Pointer = Pointer.NULL

    @JvmField
    var size: Int = 0
}

@Structure.FieldOrder("method", "data")
private open class FgRequest private constructor() : Structure() {
    class ByValue : FgRequest(), Structure.ByValue
    class ByReference : FgRequest(), Structure.ByReference

    @JvmField
    var method: Int = 0

    @JvmField
    var data: FgData.ByValue = FgData.ByValue()
}

@Structure.FieldOrder("data", "error")
private open class FgResponse private constructor() : Structure() {
    class ByValue : FgResponse(), Structure.ByValue
    class ByReference : FgResponse(), Structure.ByReference

    @JvmField
    var data: FgData.ByValue = FgData.ByValue()

    @JvmField
    var error: FgData.ByValue = FgData.ByValue()
}

private interface BridgeLib : Library {
    fun fg_init_platform_method_handle_{{.Timestamp}}(handle: FgPlatformMethodHandleCallback)
    fun fg_call_dart_method_{{.Timestamp}}(request: FgRequest.ByValue)
    fun fg_call_go_method_{{.Timestamp}}(request: FgRequest.ByValue): FgResponse.ByValue
}

private interface FgPlatformMethodHandleCallback : Callback {
    fun invoke(request: FgRequest.ByValue, response: FgResponse.ByReference)
}
