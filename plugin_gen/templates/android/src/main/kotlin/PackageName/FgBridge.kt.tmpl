package {{.PackageName}}

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.charset.StandardCharsets

/**
 * Interface for FgBridge delegate to handle method calls
 */
interface FgBridgeDelegate {
    fun methodHandle(method: String, data: ByteArray?): ByteArray?
}

@Structure.FieldOrder("data", "size")
private open class FgData private constructor() : Structure() {
    class ByValue : FgData(), Structure.ByValue

    @JvmField
    var data: Pointer? = null

    @JvmField
    var size: Int = 0
}

@Structure.FieldOrder("method", "data")
private open class FgRequest private constructor() : Structure() {
    class ByValue : FgRequest(), Structure.ByValue
    class ByReference : FgRequest(), Structure.ByReference

    @JvmField
    var method: FgData.ByValue = FgData.ByValue()

    @JvmField
    var data: FgData.ByValue = FgData.ByValue()
}

@Structure.FieldOrder("data")
private open class FgResponse private constructor() : Structure() {
    class ByValue : FgResponse(), Structure.ByValue
    class ByReference : FgResponse(), Structure.ByReference

    @JvmField
    var data: FgData.ByValue = FgData.ByValue()
}

private interface BridgeLib : Library {
    fun fg_init_method_handle(handle: FgMethodHandleCallback)
    fun fg_call_dart_method(request: FgRequest.ByValue)
    fun fg_call_go_method(request: FgRequest.ByValue): FgResponse.ByValue
}

private interface FgMethodHandleCallback : com.sun.jna.Callback {
    fun invoke(request: FgRequest.ByValue, response: FgResponse.ByReference)
}

class FgBridge private constructor() {
    companion object {
        @Volatile
        private var instance: FgBridge? = null

        @JvmStatic
        fun sharedInstance(): FgBridge {
            return instance ?: synchronized(this) {
                instance ?: FgBridge().also {
                    instance = it
                }
            }
        }
    }

    private val bridgeLib: BridgeLib = Native.load("{{.LibName}}", BridgeLib::class.java)

    private var methodHandle: FgMethodHandleCallback

    var delegate: FgBridgeDelegate? = null

    init {
        methodHandle = object : FgMethodHandleCallback {
            override fun invoke(request: FgRequest.ByValue, response: FgResponse.ByReference) {
                methodHandle(request, response)
            }
        }
        bridgeLib.fg_init_method_handle(methodHandle)
    }

    private fun freeFgData(value: FgData) {
        if (value.data != null) {
            Native.free(Pointer.nativeValue(value.data))
            value.data = null
            value.size = 0
        }
    }

    private fun mapFgDataFromBytes(from: ByteArray?): FgData.ByValue {
        val result = FgData.ByValue()
        if (from != null) {
            val memory = Pointer(Native.malloc(from.size.toLong()))
            memory.write(0, from, 0, from.size)
            result.data = memory
            result.size = from.size
        }
        return result
    }

    private fun mapFgDataToBytes(from: FgData): ByteArray? {
        if (from.data == null) return null
        val result = from.data!!.getByteArray(0, from.size)
        freeFgData(from)
        return result
    }

    private fun mapFgDataFromString(from: String): FgData.ByValue {
        val bytes = from.toByteArray(Charsets.UTF_8)
        return mapFgDataFromBytes(bytes)
    }

    private fun mapFgDataToString(from: FgData): String {
        val bytes = mapFgDataToBytes(from) ?: return ""
        return String(bytes, StandardCharsets.UTF_8)
    }

    private fun methodHandle(request: FgRequest.ByValue, response: FgResponse.ByReference) {
        val method = mapFgDataToString(request.method)
        val data = mapFgDataToBytes(request.data)

        val handleData = delegate?.methodHandle(method, data)

        response.data = mapFgDataFromBytes(handleData)
    }

    fun callGoMethod(method: String, data: ByteArray? = null): ByteArray? {
        if (method.isEmpty()) return null

        val request = FgRequest.ByValue()
        request.method = mapFgDataFromString(method)
        request.data = mapFgDataFromBytes(data)

        val response = bridgeLib.fg_call_go_method(request)

        val result = mapFgDataToBytes(response.data)
        return result
    }

    fun callDartMethod(method: String, data: ByteArray? = null) {
        if (method.isEmpty()) return

        val request = FgRequest.ByValue()
        request.method = mapFgDataFromString(method)
        request.data = mapFgDataFromBytes(data)

        bridgeLib.fg_call_dart_method(request)
    }
}
