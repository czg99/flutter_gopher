// Code generated by flutter_gopher. DO NOT EDIT.
package bridge

/*
#include "include/bridge.h"
extern DLLEXPORT void fg_platform_method_handle(FgRequest request, FgResponse* response);
*/
import "C"
import (
	"fmt"
	pl "platform_linux"
	plb "platform_linux/bridge"
)

func init() {
	fgPlatformMethodHandle = (C.FgPlatformMethodHandle)(C.fg_platform_method_handle)
	plb.CallGoMethod = callGoMethod
	plb.CallDartMethod = callDartMethod
	plb.InitMethodHandle = initPlatformMethodHandle
	go pl.Register()
}

var linuxPlatformMethodHandle MethodHandle

//export fg_platform_method_handle
func fg_platform_method_handle(request C.FgRequest, response *C.FgResponse) {
	method, data := mapFromFgRequest(request)
	if linuxPlatformMethodHandle == nil {
		response.error = mapFromString("init err: platform method handle not init")
		return
	}

	defer func() {
		if r := recover(); r != nil {
			response.error = mapFromString(fmt.Sprintf("panic err: %v", r))
		}
	}()

	result, err := linuxPlatformMethodHandle(method, data)
	if err != nil {
		response.error = mapFromString(err.Error())
		return
	}
	response.data = mapFromBytes(result)
}

func initPlatformMethodHandle(handle func(method int, data []byte) ([]byte, error)) {
	linuxPlatformMethodHandle = handle
}
